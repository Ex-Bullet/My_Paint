{"ast":null,"code":"import _objectSpread from \"/Users/userfly/Documents/W-JSC-502/my_paint/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/userfly/Documents/W-JSC-502/my_paint/src/canvas.js\";\nimport React, { Component } from 'react';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.isPainting = false;\n    this.userStrokeStyle = 'rgb(39, 123, 201)';\n    this.line = [];\n    this.prevPos = {\n      offsetX: 0,\n      offsetY: 0\n    };\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.endPaintEvent = this.endPaintEvent.bind(this);\n  }\n\n  onMouseDown({\n    nativeEvent\n  }) {\n    const offsetX = nativeEvent.offsetX,\n          offsetY = nativeEvent.offsetY;\n    this.isPainting = true;\n    this.prevPos = {\n      offsetX,\n      offsetY\n    };\n  }\n\n  onMouseMove({\n    nativeEvent\n  }) {\n    if (this.isPainting) {\n      const offsetX = nativeEvent.offsetX,\n            offsetY = nativeEvent.offsetY;\n      const offSetData = {\n        offsetX,\n        offsetY\n      }; // Set the start and stop position of the paint event.\n\n      const positionData = {\n        start: _objectSpread({}, this.prevPos),\n        stop: _objectSpread({}, offSetData)\n      }; // Add the position to the line array\n\n      this.line = this.line.concat(positionData);\n      this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n    }\n  }\n\n  endPaintEvent() {\n    if (this.isPainting) {\n      this.isPainting = false;\n    }\n  }\n\n  paint(prevPos, currPos, strokeStyle) {\n    const offsetX = currPos.offsetX,\n          offsetY = currPos.offsetY;\n    const x = prevPos.offsetX,\n          y = prevPos.offsetY;\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = strokeStyle; // Move the the prevPosition of the mouse\n\n    this.ctx.moveTo(x, y); // Draw a line to the current position of the mouse\n\n    this.ctx.lineTo(offsetX, offsetY); // Visualize the line using the strokeStyle\n\n    this.ctx.stroke();\n    this.prevPos = {\n      offsetX,\n      offsetY\n    };\n  }\n\n  componentDidMount() {\n    // Here we set up the properties of the canvas element. \n    this.canvas.width = 1000;\n    this.canvas.height = 800;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 5;\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      // We use the ref attribute to get direct access to the canvas element. \n      ref: ref => this.canvas = ref,\n      style: {\n        background: 'black'\n      },\n      onMouseDown: this.onMouseDown,\n      onMouseLeave: this.endPaintEvent,\n      onMouseUp: this.endPaintEvent,\n      onMouseMove: this.onMouseMove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/userfly/Documents/W-JSC-502/my_paint/src/canvas.js"],"names":["React","Component","Canvas","constructor","props","isPainting","userStrokeStyle","line","prevPos","offsetX","offsetY","onMouseDown","bind","onMouseMove","endPaintEvent","nativeEvent","offSetData","positionData","start","stop","concat","paint","currPos","strokeStyle","x","y","ctx","beginPath","moveTo","lineTo","stroke","componentDidMount","canvas","width","height","getContext","lineJoin","lineCap","lineWidth","render","ref","background"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAC7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAOnBC,UAPmB,GAON,KAPM;AAAA,SAQnBC,eARmB,GAQD,mBARC;AAAA,SASnBC,IATmB,GASZ,EATY;AAAA,SAUnBC,OAVmB,GAUT;AAAEC,MAAAA,OAAO,EAAE,CAAX;AAAcC,MAAAA,OAAO,EAAE;AAAvB,KAVS;AAEjB,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAODD,EAAAA,WAAW,CAAC;AAAEI,IAAAA;AAAF,GAAD,EAAkB;AAAA,UACnBN,OADmB,GACEM,WADF,CACnBN,OADmB;AAAA,UACVC,OADU,GACEK,WADF,CACVL,OADU;AAE3B,SAAKL,UAAL,GAAkB,IAAlB;AACA,SAAKG,OAAL,GAAe;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAf;AACD;;AAEDG,EAAAA,WAAW,CAAC;AAAEE,IAAAA;AAAF,GAAD,EAAkB;AAC3B,QAAI,KAAKV,UAAT,EAAqB;AAAA,YACXI,OADW,GACUM,WADV,CACXN,OADW;AAAA,YACFC,OADE,GACUK,WADV,CACFL,OADE;AAEnB,YAAMM,UAAU,GAAG;AAAEP,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAnB,CAFmB,CAGnB;;AACA,YAAMO,YAAY,GAAG;AACnBC,QAAAA,KAAK,oBAAO,KAAKV,OAAZ,CADc;AAEnBW,QAAAA,IAAI,oBAAOH,UAAP;AAFe,OAArB,CAJmB,CAQnB;;AACA,WAAKT,IAAL,GAAY,KAAKA,IAAL,CAAUa,MAAV,CAAiBH,YAAjB,CAAZ;AACA,WAAKI,KAAL,CAAW,KAAKb,OAAhB,EAAyBQ,UAAzB,EAAqC,KAAKV,eAA1C;AACD;AACF;;AACDQ,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKT,UAAT,EAAqB;AACnB,WAAKA,UAAL,GAAkB,KAAlB;AACD;AACF;;AACDgB,EAAAA,KAAK,CAACb,OAAD,EAAUc,OAAV,EAAmBC,WAAnB,EAAgC;AAAA,UAC3Bd,OAD2B,GACNa,OADM,CAC3Bb,OAD2B;AAAA,UAClBC,OADkB,GACNY,OADM,CAClBZ,OADkB;AAAA,UAElBc,CAFkB,GAEAhB,OAFA,CAE3BC,OAF2B;AAAA,UAENgB,CAFM,GAEAjB,OAFA,CAEfE,OAFe;AAInC,SAAKgB,GAAL,CAASC,SAAT;AACA,SAAKD,GAAL,CAASH,WAAT,GAAuBA,WAAvB,CALmC,CAMnC;;AACA,SAAKG,GAAL,CAASE,MAAT,CAAgBJ,CAAhB,EAAmBC,CAAnB,EAPmC,CAQnC;;AACA,SAAKC,GAAL,CAASG,MAAT,CAAgBpB,OAAhB,EAAyBC,OAAzB,EATmC,CAUnC;;AACA,SAAKgB,GAAL,CAASI,MAAT;AACA,SAAKtB,OAAL,GAAe;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAf;AACD;;AACDqB,EAAAA,iBAAiB,GAAG;AAClB;AACA,SAAKC,MAAL,CAAYC,KAAZ,GAAoB,IAApB;AACA,SAAKD,MAAL,CAAYE,MAAZ,GAAqB,GAArB;AACA,SAAKR,GAAL,GAAW,KAAKM,MAAL,CAAYG,UAAZ,CAAuB,IAAvB,CAAX;AACA,SAAKT,GAAL,CAASU,QAAT,GAAoB,OAApB;AACA,SAAKV,GAAL,CAASW,OAAT,GAAmB,OAAnB;AACA,SAAKX,GAAL,CAASY,SAAT,GAAqB,CAArB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AACA;AACE,MAAA,GAAG,EAAGC,GAAD,IAAU,KAAKR,MAAL,GAAcQ,GAF/B;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAHT;AAIE,MAAA,WAAW,EAAE,KAAK9B,WAJpB;AAKE,MAAA,YAAY,EAAE,KAAKG,aALrB;AAME,MAAA,SAAS,EAAE,KAAKA,aANlB;AAOE,MAAA,WAAW,EAAE,KAAKD,WAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AA1E4B;;AA4E/B,eAAeX,MAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.endPaintEvent = this.endPaintEvent.bind(this);\n  }\n\n  isPainting = false;\n  userStrokeStyle = 'rgb(39, 123, 201)';\n  line = [];\n  prevPos = { offsetX: 0, offsetY: 0 };\n\n  onMouseDown({ nativeEvent }) {\n    const { offsetX, offsetY } = nativeEvent;\n    this.isPainting = true;\n    this.prevPos = { offsetX, offsetY };\n  }\n\n  onMouseMove({ nativeEvent }) {\n    if (this.isPainting) {\n      const { offsetX, offsetY } = nativeEvent;\n      const offSetData = { offsetX, offsetY };\n      // Set the start and stop position of the paint event.\n      const positionData = {\n        start: { ...this.prevPos },\n        stop: { ...offSetData },\n      };\n      // Add the position to the line array\n      this.line = this.line.concat(positionData);\n      this.paint(this.prevPos, offSetData, this.userStrokeStyle);\n    }\n  }\n  endPaintEvent() {\n    if (this.isPainting) {\n      this.isPainting = false;\n    }\n  }\n  paint(prevPos, currPos, strokeStyle) {\n    const { offsetX, offsetY } = currPos;\n    const { offsetX: x, offsetY: y } = prevPos;\n\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = strokeStyle;\n    // Move the the prevPosition of the mouse\n    this.ctx.moveTo(x, y);\n    // Draw a line to the current position of the mouse\n    this.ctx.lineTo(offsetX, offsetY);\n    // Visualize the line using the strokeStyle\n    this.ctx.stroke();\n    this.prevPos = { offsetX, offsetY };\n  }\n  componentDidMount() {\n    // Here we set up the properties of the canvas element. \n    this.canvas.width = 1000;\n    this.canvas.height = 800;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.lineJoin = 'round';\n    this.ctx.lineCap = 'round';\n    this.ctx.lineWidth = 5;\n  }\n\n  render() {\n    return (\n      <canvas\n      // We use the ref attribute to get direct access to the canvas element. \n        ref={(ref) => (this.canvas = ref)}\n        style={{ background: 'black' }}\n        onMouseDown={this.onMouseDown}\n        onMouseLeave={this.endPaintEvent}\n        onMouseUp={this.endPaintEvent}\n        onMouseMove={this.onMouseMove}\n      />\n    );\n  }\n}\nexport default Canvas;"]},"metadata":{},"sourceType":"module"}